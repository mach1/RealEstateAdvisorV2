package com.mach1.reafs.rules

import com.mach1.reafs.input.UserInput;
import com.mach1.reafs.input.types.*;
import com.mach1.reafs.output.types.*;
import com.mach1.reafs.output.types.RealEstateType;
import java.util.List;
import com.mach1.reafs.output.UserOutput;


#Distance from the neighbors rules
rule "RE-01: When distance from the neighbors is same building then suggest plot size < 500"
	when
		DistanceFromTheNeighbors( this == DistanceFromTheNeighbors.SAME_BUILDING )
		outputList : List()
	then
		outputList.add(PlotSize.LESS_THAN_500);
end

rule "RE-02: When distance from the neighbors is few hundred meters away then suggest plot size between 500 to 1500"
	when
		DistanceFromTheNeighbors( this == DistanceFromTheNeighbors.FEW_HUNDRED_METERS )
		outputList : List()
	then
		outputList.add(PlotSize.FROM_500_TO_1500);
end

rule "RE-03: When distance from the neighbors is more than 1km away then suggest plot size more than 1500"
	when
		DistanceFromTheNeighbors( this == DistanceFromTheNeighbors.MORE_THAN_1_KM )
		outputList : List()
	then
		outputList.add(PlotSize.MORE_THAN_1500);
end

rule "RE-04: When distance from the neighbors is same building then suggest flat"
	when
		DistanceFromTheNeighbors( this == DistanceFromTheNeighbors.SAME_BUILDING )
		outputList : List()
	then
		outputList.add(RealEstateType.FLAT);
end

rule "RE-05: When distance from the neighbors is same building then suggest terraced"
	when
		DistanceFromTheNeighbors( this == DistanceFromTheNeighbors.SAME_BUILDING )
		outputList : List()
	then
		outputList.add(RealEstateType.TERRACED);
end

rule "RE-06: When distance from the neighbors is few hundred meters away then suggest terraced"
	when
		DistanceFromTheNeighbors( this == DistanceFromTheNeighbors.FEW_HUNDRED_METERS )
		outputList : List()
	then
		outputList.add(RealEstateType.TERRACED);
end

rule "RE-07: When distance from the neighbors is few hundred meters away then suggest house"
	when
		DistanceFromTheNeighbors( this == DistanceFromTheNeighbors.FEW_HUNDRED_METERS )
		outputList : List()
	then
		outputList.add(RealEstateType.HOUSE);
end

rule "RE-08: When distance from the neighbors is more than 1km away then suggest house"
	when
		DistanceFromTheNeighbors( this == DistanceFromTheNeighbors.MORE_THAN_1_KM )
		outputList : List()
	then
		outputList.add(RealEstateType.HOUSE);
end

#Distance from the sea rules
rule "RE-09: When sea should be visible from the window then suggest Kesklinn as location"
	when
		DistanceFromTheSea( this == DistanceFromTheSea.VISIBLE_FROM_WINDOW )
		outputList : List()
	then
		outputList.add(RealEstateLocation.KESKLINN);
end

rule "RE-10: When sea should be visible from the window then suggest Pirita as location"
	when
		DistanceFromTheSea( this == DistanceFromTheSea.VISIBLE_FROM_WINDOW )
		outputList : List()
	then
		outputList.add(RealEstateLocation.PIRITA);
end

rule "RE-11: When sea should be a walk away then suggest Pirita as location"
	when
		DistanceFromTheSea( this == DistanceFromTheSea.A_WALK_AWAY )
		outputList : List()
	then
		outputList.add(RealEstateLocation.PIRITA);
end

rule "RE-12: When sea should be a walk away then suggest Kesklinn as location"
	when
		DistanceFromTheSea( this == DistanceFromTheSea.A_WALK_AWAY )
		outputList : List()
	then
		outputList.add(RealEstateLocation.KESKLINN);
end

rule "RE-13: When sea should be a walk away then suggest Kristiine as location"
	when
		DistanceFromTheSea( this == DistanceFromTheSea.A_WALK_AWAY )
		outputList : List()
	then
		outputList.add(RealEstateLocation.KRISTIINE);
end

rule "RE-14: When sea distance is not important then suggest Lasnamäe as location"
	when
		DistanceFromTheSea( this == DistanceFromTheSea.NOT_IMPORTANT )
		outputList : List()
	then
		outputList.add(RealEstateLocation.LASNAMÄE);
end

rule "RE-15: When sea distance is not important then suggest Mustamäe as location"
	when
		DistanceFromTheSea( this == DistanceFromTheSea.NOT_IMPORTANT )
		outputList : List()
	then
		outputList.add(RealEstateLocation.MUSTAMÄE);
end

#Family size rules
rule "RE-16: When family size is 1 person then suggest total area less than 50 square meters"
	when 
		FamilySize( this == FamilySize.ONE_MEMBER)
		outputList : List()
	then
		outputList.add(TotalArea.LESS_THAN_50);
end

rule "RE-17: When family size is 2-4 people then suggest total area 51 to 100 square meters"
	when
		FamilySize( this == FamilySize.TWO_TO_FOUR_MEMBERS)
		outputList : List()
	then 
		outputList.add(TotalArea.FROM_50_TO_100);
end

rule "RE-18: When family size is 2-4 people then suggest total area 101 to 250 square meters"
	when
		FamilySize( this == FamilySize.TWO_TO_FOUR_MEMBERS)
		outputList : List()
	then 
		outputList.add(TotalArea.FROM_100_TO_250);
end

rule "RE-19: When family size is 5 or more people then suggest total area 101 to 250 square meters"
	when
		FamilySize( this == FamilySize.FIVE_OR_MORE_MEMBERS)
		outputList : List()
	then 
		outputList.add(TotalArea.FROM_100_TO_250);
end

rule "RE-20: When family size is 5 or more people then suggest total area 250 square meters or more"
	when
		FamilySize( this == FamilySize.FIVE_OR_MORE_MEMBERS)
		outputList : List()
	then 
		outputList.add(TotalArea.MORE_THAN_250);
end

rule "RE-21: When family size is 1 person then suggest room count 1"
	when 
		FamilySize( this == FamilySize.ONE_MEMBER)
		outputList : List()
	then
		outputList.add(NumberOfRooms.ONE);
end

rule "RE-22: When family size is 1 person then suggest room count 2"
	when 
		FamilySize( this == FamilySize.ONE_MEMBER)
		outputList : List()
	then
		outputList.add(NumberOfRooms.TWO);
end

rule "RE-23: When family size is 2-4 people then suggest room count 2"
	when 
		FamilySize( this == FamilySize.TWO_TO_FOUR_MEMBERS)
		outputList : List()
	then
		outputList.add(NumberOfRooms.TWO);
end

rule "RE-24: When family size is 2-4 people then suggest room count 3"
	when 
		FamilySize( this == FamilySize.TWO_TO_FOUR_MEMBERS)
		outputList : List()
	then
		outputList.add(NumberOfRooms.THREE);
end

rule "RE-25: When family size is 2-4 people then suggest room count 4"
	when 
		FamilySize( this == FamilySize.TWO_TO_FOUR_MEMBERS)
		outputList : List()
	then
		outputList.add(NumberOfRooms.FOUR);
end

rule "RE-26: When family size is 2-4 people then suggest room count greater than 4"
	when 
		FamilySize( this == FamilySize.TWO_TO_FOUR_MEMBERS)
		outputList : List()
	then
		outputList.add(NumberOfRooms.MORE_THAN_FOUR);
end

rule "RE-27: When family size is 5 or more people then suggest room count greater than 4"
	when 
		FamilySize( this == FamilySize.FIVE_OR_MORE_MEMBERS)
		outputList : List()
	then
		outputList.add(NumberOfRooms.MORE_THAN_FOUR);
end

#Income rules
rule "RE-28: When income is less than 500 then suggest price less than 200"
	when 
		Income( this == Income.LESS_THAN_500)
		outputList : List()
	then
		outputList.add(Price.LESS_THAN_200);
end

rule "RE-29: When income is less than 500 then suggest price 201 to 500"
	when 
		Income( this == Income.LESS_THAN_500)
		outputList : List()
	then
		outputList.add(Price.FROM_200_TO_500);
end

rule "RE-30: When income is 500 to 1200 then suggest price less than 200"
	when 
		Income( this == Income.BETWEEN_500_AND_1200)
		outputList : List()
	then
		outputList.add(Price.LESS_THAN_200);
end

rule "RE-31: When income is 500 to 1200 then suggest price 201 to 500"
	when 
		Income( this == Income.BETWEEN_500_AND_1200)
		outputList : List()
	then
		outputList.add(Price.FROM_200_TO_500);
end

rule "RE-32: When income is 500 to 1200 then suggest price 501 to 1200"
	when 
		Income( this == Income.BETWEEN_500_AND_1200)
		outputList : List()
	then
		outputList.add(Price.FROM_500_TO_1200);
end

rule "RE-33: When income is 500 to 1200 then suggest price 50 001 to 250 000"
	when 
		Income( this == Income.BETWEEN_500_AND_1200)
		outputList : List()
	then
		outputList.add(Price.FROM_50000_TO_250000);
end

rule "RE-34: When income is 1201 to 4000 then suggest price 201 to 500"
	when 
		Income( this == Income.BETWEEN_1200_AND_4000)
		outputList : List()
	then
		outputList.add(Price.FROM_200_TO_500);
end

rule "RE-35: When income is 1201 to 4000 then suggest price 501 to 1200"
	when 
		Income( this == Income.BETWEEN_1200_AND_4000)
		outputList : List()
	then
		outputList.add(Price.FROM_500_TO_1200);
end

rule "RE-36: When income is 1201 to 4000 then suggest price 1201 to 50 000"
	when 
		Income( this == Income.BETWEEN_1200_AND_4000)
		outputList : List()
	then
		outputList.add(Price.FROM_1200_TO_50000);
end

rule "RE-37: When income is 1201 to 4000 then suggest price 50 001 to 250 000"
	when 
		Income( this == Income.BETWEEN_1200_AND_4000)
		outputList : List()
	then
		outputList.add(Price.FROM_50000_TO_250000);
end

rule "RE-38: When income is greater than 4000 then suggest price 501 to 1200"
	when 
		Income( this == Income.MORE_THAN_4000)
		outputList : List()
	then
		outputList.add(Price.FROM_500_TO_1200);
end

rule "RE-39: When income is greater than 4000 then suggest price 1201 to 50 000"
	when 
		Income( this == Income.MORE_THAN_4000)
		outputList : List()
	then
		outputList.add(Price.FROM_1200_TO_50000);
end

rule "RE-40: When income is greater than 4000 then suggest price greater than 250 000"
	when 
		Income( this == Income.MORE_THAN_4000)
		outputList : List()
	then
		outputList.add(Price.MORE_THAN_250000);
end

rule "RE-41: When income is less than 500 then suggest condition renovated"
	when 
		Income( this == Income.LESS_THAN_500)
		outputList : List()
	then
		outputList.add(Condition.RENOVATED);
end

rule "RE-42: When income is 500 to 1200 then suggest condition in need of repair"
	when 
		Income( this == Income.BETWEEN_500_AND_1200)
		outputList : List()
	then
		outputList.add(Condition.IN_NEED_OF_REPAIR);
end

rule "RE-43: When income is 500 to 1200 then suggest condition renovated"
	when 
		Income( this == Income.BETWEEN_500_AND_1200)
		outputList : List()
	then
		outputList.add(Condition.RENOVATED);
end

rule "RE-44: When income is 500 to 1200 then suggest condition new"
	when 
		Income( this == Income.BETWEEN_500_AND_1200)
		outputList : List()
	then
		outputList.add(Condition.NEW);
end

rule "RE-45: When income is 1201 to 4000 then suggest condition renovated"
	when 
		Income( this == Income.BETWEEN_1200_AND_4000)
		outputList : List()
	then
		outputList.add(Condition.RENOVATED);
end

rule "RE-46: When income is 1201 to 4000 then suggest condition new"
	when 
		Income( this == Income.BETWEEN_1200_AND_4000)
		outputList : List()
	then
		outputList.add(Condition.NEW);
end

rule "RE-47: When income is greater than 4000 then suggest condition renovated"
	when 
		Income( this == Income.MORE_THAN_4000)
		outputList : List()
	then
		outputList.add(Condition.RENOVATED);
end

rule "RE-48: When income is greater than 4000 then suggest condition new"
	when 
		Income( this == Income.MORE_THAN_4000)
		outputList : List()
	then
		outputList.add(Condition.NEW);
end

#Silence rules
rule "RE-49: When silence is very important then suggest real estate type house"
	when 
		Silence( this == Silence.VERY_IMPORTANT)
		outputList : List()
	then
		outputList.add(RealEstateType.HOUSE);
end

rule "RE-50: When likes to walk in silence then suggest real estate type flat"
	when 
		Silence( this == Silence.LIKE_TO_WALK_IN_SILENCE_TIME_TO_TIME)
		outputList : List()
	then
		outputList.add(RealEstateType.FLAT);
end

rule "RE-51: When likes to walk in silence then suggest real estate type house"
	when 
		Silence( this == Silence.LIKE_TO_WALK_IN_SILENCE_TIME_TO_TIME)
		outputList : List()
	then
		outputList.add(RealEstateType.HOUSE);
end

rule "RE-52: When likes to walk in silence then suggest real estate type terraced"
	when 
		Silence( this == Silence.LIKE_TO_WALK_IN_SILENCE_TIME_TO_TIME)
		outputList : List()
	then
		outputList.add(RealEstateType.TERRACED);
end

rule "RE-53: When silence is not necessary then suggest real estate type flat"
	when 
		Silence( this == Silence.NOT_NECESSARY)
		outputList : List()
	then
		outputList.add(RealEstateType.FLAT);
end

rule "RE-54: When silence is not necessary then suggest real estate type terraced"
	when 
		Silence( this == Silence.NOT_NECESSARY)
		outputList : List()
	then
		outputList.add(RealEstateType.TERRACED);
end

rule "RE-55: When silence is very important then suggest plot size greater than 1500"
	when 
		Silence( this == Silence.VERY_IMPORTANT)
		outputList : List()
	then
		outputList.add(PlotSize.MORE_THAN_1500);
end

rule "RE-56: When silence is very important then suggest plot size 501 to 1500"
	when 
		Silence( this == Silence.VERY_IMPORTANT)
		outputList : List()
	then
		outputList.add(PlotSize.FROM_500_TO_1500);
end

rule "RE-57: When likes to walk in silence then suggest plot size 501 to 1500"
	when 
		Silence( this == Silence.LIKE_TO_WALK_IN_SILENCE_TIME_TO_TIME)
		outputList : List()
	then
		outputList.add(PlotSize.FROM_500_TO_1500);
end

rule "RE-58: When silence is not necessary then suggest plot size less than 500"
	when 
		Silence( this == Silence.NOT_NECESSARY)
		outputList : List()
	then
		outputList.add(PlotSize.LESS_THAN_500);
end

rule "RE-59: When silence is not necessary then suggest plot size 501 to 1500"
	when 
		Silence( this == Silence.NOT_NECESSARY)
		outputList : List()
	then
		outputList.add(PlotSize.FROM_500_TO_1500);
end

#Disabilities rules
rule "RE-60: When no disabilities then suggest floors count 1"
	when 
		Disabilities( this == Disabilities.NONE)
		outputList : List()
	then
		outputList.add(NumberOfFloors.ONE);
end

rule "RE-61: When no disabilities then suggest floors count 2"
	when 
		Disabilities( this == Disabilities.NONE)
		outputList : List()
	then
		outputList.add(NumberOfFloors.TWO);
end

rule "RE-62: When no disabilities then suggest floors count 3"
	when 
		Disabilities( this == Disabilities.NONE)
		outputList : List()
	then
		outputList.add(NumberOfFloors.THREE);
end

rule "RE-63: When no disabilities then suggest floors count greater than 3"
	when 
		Disabilities( this == Disabilities.NONE)
		outputList : List()
	then
		outputList.add(NumberOfFloors.MORE_THAN_THREE);
end

rule "RE-64: When minor disability then suggest floors count 1"
	when 
		Disabilities( this == Disabilities.MINOR_DISABILITY)
		outputList : List()
	then
		outputList.add(NumberOfFloors.ONE);
end

rule "RE-65: When minor disability then suggest floors count 2"
	when 
		Disabilities( this == Disabilities.MINOR_DISABILITY)
		outputList : List()
	then
		outputList.add(NumberOfFloors.TWO);
end

rule "RE-66: When severe disability then suggest floors count 2"
	when 
		Disabilities( this == Disabilities.SEVERE_DISABILITY)
		outputList : List()
	then
		outputList.add(NumberOfFloors.ONE);
end

rule "RE-67: When no disabilities then suggest condition new"
	when 
		Disabilities( this == Disabilities.NONE)
		outputList : List()
	then
		outputList.add(Condition.NEW);
end
	
rule "RE-68: When no disabilities then suggest condition renovated"
	when 
		Disabilities( this == Disabilities.NONE)
		outputList : List()
	then
		outputList.add(Condition.RENOVATED);
end

rule "RE-69: When no disabilities then suggest condition in need of repair"
	when 
		Disabilities( this == Disabilities.NONE)
		outputList : List()
	then
		outputList.add(Condition.IN_NEED_OF_REPAIR);
end

rule "RE-70: When minor disability then suggest condition new"
	when 
		Disabilities( this == Disabilities.MINOR_DISABILITY)
		outputList : List()
	then
		outputList.add(Condition.NEW);
end

rule "RE-71: When minor disability then suggest condition renovated"
	when 
		Disabilities( this == Disabilities.MINOR_DISABILITY)
		outputList : List()
	then
		outputList.add(Condition.RENOVATED);
end

rule "RE-72: When severe disability then suggest condition new"
	when 
		Disabilities( this == Disabilities.SEVERE_DISABILITY)
		outputList : List()
	then
		outputList.add(Condition.NEW);
end

rule "RE-73: When severe disability then suggest condition renovated"
	when 
		Disabilities( this == Disabilities.SEVERE_DISABILITY)
		outputList : List()
	then
		outputList.add(Condition.RENOVATED);
end

#Repair skill rules
rule "RE-74: When educated repairman then suggest condition in need of repair"
	when 
		RepairSkills( this == RepairSkills.REPAIR_OR_CONSTRUCTION_EDUCATION)
		outputList : List()
	then
		outputList.add(Condition.IN_NEED_OF_REPAIR);
end

rule "RE-75: When has some repairman proficiency then suggest condition in need of repair"
	when 
		RepairSkills( this == RepairSkills.SOME_PROFICIENCY_IN_REPAIRS)
		outputList : List()
	then
		outputList.add(Condition.IN_NEED_OF_REPAIR);
end

rule "RE-76: When has some repairman proficiency then suggest condition renovated"
	when 
		RepairSkills( this == RepairSkills.SOME_PROFICIENCY_IN_REPAIRS)
		outputList : List()
	then
		outputList.add(Condition.RENOVATED);
end

rule "RE-77: When no repairman proficiency in family then suggest condition renovated"
	when 
		RepairSkills( this == RepairSkills.NO_PROFICIENCY_IN_FAMILY)
		outputList : List()
	then
		outputList.add(Condition.RENOVATED);
end

rule "RE-78: When no repairman proficiency in family then suggest condition renovated"
	when 
		RepairSkills( this == RepairSkills.NO_PROFICIENCY_IN_FAMILY)
		outputList : List()
	then
		outputList.add(Condition.NEW);
end

rule "RE-79: When educated repairman then suggest price less than 200"
	when 
		RepairSkills( this == RepairSkills.REPAIR_OR_CONSTRUCTION_EDUCATION)
		outputList : List()
	then
		outputList.add(Price.LESS_THAN_200);
end

rule "RE-80: When educated repairman then suggest price 201 to 500"
	when 
		RepairSkills( this == RepairSkills.REPAIR_OR_CONSTRUCTION_EDUCATION)
		outputList : List()
	then
		outputList.add(Price.FROM_200_TO_500);
end

rule "RE-81: When educated repairman then suggest price 1201 to 50 000"
	when 
		RepairSkills( this == RepairSkills.REPAIR_OR_CONSTRUCTION_EDUCATION)
		outputList : List()
	then
		outputList.add(Price.FROM_1200_TO_50000);
end

rule "RE-82: When has some repairman proficiency then suggest price less than 200"
	when 
		RepairSkills( this == RepairSkills.SOME_PROFICIENCY_IN_REPAIRS)
		outputList : List()
	then
		outputList.add(Price.LESS_THAN_200);
end

rule "RE-83: When has some repairman proficiency then suggest price 201 to 500"
	when 
		RepairSkills( this == RepairSkills.SOME_PROFICIENCY_IN_REPAIRS)
		outputList : List()
	then
		outputList.add(Price.FROM_200_TO_500);
end

rule "RE-84: When has some repairman proficiency then suggest price 1201 to 50 000"
	when 
		RepairSkills( this == RepairSkills.SOME_PROFICIENCY_IN_REPAIRS)
		outputList : List()
	then
		outputList.add(Price.FROM_1200_TO_50000);
end

rule "RE-85: When has some repairman proficiency then suggest price 50 001 to 250 000"
	when 
		RepairSkills( this == RepairSkills.SOME_PROFICIENCY_IN_REPAIRS)
		outputList : List()
	then
		outputList.add(Price.FROM_50000_TO_250000);
end

rule "RE-86: When no repairman proficiency in family then suggest price 501 to 1200"
	when 
		RepairSkills( this == RepairSkills.NO_PROFICIENCY_IN_FAMILY)
		outputList : List()
	then
		outputList.add(Price.FROM_500_TO_1200);
end

rule "RE-87: When no repairman proficiency in family then suggest price 1201 to 50 000"
	when 
		RepairSkills( this == RepairSkills.NO_PROFICIENCY_IN_FAMILY)
		outputList : List()
	then
		outputList.add(Price.FROM_1200_TO_50000);
end

rule "RE-88: When no repairman proficiency in family then suggest price 50 001 to 250 000"
	when 
		RepairSkills( this == RepairSkills.NO_PROFICIENCY_IN_FAMILY)
		outputList : List()
	then
		outputList.add(Price.FROM_50000_TO_250000);
end

rule "RE-89: When no repairman proficiency in family then suggest price greater than 250 000"
	when 
		RepairSkills( this == RepairSkills.NO_PROFICIENCY_IN_FAMILY)
		outputList : List()
	then
		outputList.add(Price.MORE_THAN_250000);
end

#Hobbies rules
rule "RE-90: When no hobbies or no special conditions needed then suggest plot size less than 500"
	when 
		Hobbies( this == Hobbies.NONE_OR_NO_SPECIAL_CONDITIONS_NEEDED)
		outputList : List()
	then
		outputList.add(PlotSize.LESS_THAN_500);
end

rule "RE-91: When hobbies that require a lot of space then suggest plot size 501 to 1500"
	when 
		Hobbies( this == Hobbies.LARGE_AREA_NEEDED)
		outputList : List()
	then
		outputList.add(PlotSize.FROM_500_TO_1500);
end

rule "RE-92: When hobbies that require lots of space then suggest plot size greater than 1500"
	when 
		Hobbies( this == Hobbies.LARGE_AREA_NEEDED)
		outputList : List()
	then
		outputList.add(PlotSize.MORE_THAN_1500);
end

rule "RE-93: When hobbies that make noise then suggest plot size 501 to 1500"
	when 
		Hobbies( this == Hobbies.NOISY)
		outputList : List()
	then
		outputList.add(PlotSize.FROM_500_TO_1500);
end

rule "RE-94: When hobbies that make noise then suggest plot size greater than 1500"
	when 
		Hobbies( this == Hobbies.NOISY)
		outputList : List()
	then
		outputList.add(PlotSize.MORE_THAN_1500);
end

rule "RE-95: When no hobbies or no special conditions needed then suggest real estate type flat"
	when 
		Hobbies( this == Hobbies.NONE_OR_NO_SPECIAL_CONDITIONS_NEEDED)
		outputList : List()
	then
		outputList.add(RealEstateType.FLAT);
end

rule "RE-96: When no hobbies or no special conditions needed then suggest real estate type terraced"
	when 
		Hobbies( this == Hobbies.NONE_OR_NO_SPECIAL_CONDITIONS_NEEDED)
		outputList : List()
	then
		outputList.add(RealEstateType.TERRACED);
end

rule "RE-97: When hobbies that require lots of space then suggest real estate type terraced"
	when 
		Hobbies( this == Hobbies.LARGE_AREA_NEEDED)
		outputList : List()
	then
		outputList.add(RealEstateType.TERRACED);
end

rule "RE-98: When hobbies that require lots of space then suggest real estate type house"
	when 
		Hobbies( this == Hobbies.LARGE_AREA_NEEDED)
		outputList : List()
	then
		outputList.add(RealEstateType.HOUSE);
end

rule "RE-99: When hobbies that make noise then suggest real estate type house"
	when 
		Hobbies( this == Hobbies.NOISY)
		outputList : List()
	then
		outputList.add(RealEstateType.HOUSE);
end

#School travel time rules
rule "RE-100: When school travel time is less than 15 minutes then suggest real estate location kesklinn"
	when 
		SchoolTravelTime( this == SchoolTravelTime.MAX_OF_15_MIN)
		outputList : List()
	then
		outputList.add(RealEstateLocation.KESKLINN);
end

rule "RE-101: When school travel time is less than 15 minutes then suggest real estate location Kristiine"
	when 
		SchoolTravelTime( this == SchoolTravelTime.MAX_OF_15_MIN)
		outputList : List()
	then
		outputList.add(RealEstateLocation.KRISTIINE);
end

rule "RE-102: When school travel time is less than 15 minutes then suggest real estate location Mustamäe"
	when 
		SchoolTravelTime( this == SchoolTravelTime.MAX_OF_15_MIN)
		outputList : List()
	then
		outputList.add(RealEstateLocation.MUSTAMÄE);
end

rule "RE-103: When school travel time is less than 15 minutes then suggest real estate location Pirita"
	when 
		SchoolTravelTime( this == SchoolTravelTime.MAX_OF_15_MIN)
		outputList : List()
	then
		outputList.add(RealEstateLocation.PIRITA);
end

rule "RE-104: When school travel time is 15 to 45 minutes then suggest real estate location kesklinn"
	when 
		SchoolTravelTime( this == SchoolTravelTime.FROM_15_TO_45_MIN)
		outputList : List()
	then
		outputList.add(RealEstateLocation.KESKLINN);
end

rule "RE-105: When school travel time is 15 to 45 minutes then suggest real estate location Kristiine"
	when 
		SchoolTravelTime( this == SchoolTravelTime.FROM_15_TO_45_MIN)
		outputList : List()
	then
		outputList.add(RealEstateLocation.KRISTIINE);
end

rule "RE-106: When school travel time is 15 to 45 minutes then suggest real estate location Mustamäe"
	when 
		SchoolTravelTime( this == SchoolTravelTime.FROM_15_TO_45_MIN)
		outputList : List()
	then
		outputList.add(RealEstateLocation.MUSTAMÄE);
end

rule "RE-107: When school travel time is 15 to 45 minutes then suggest real estate location Lasnamäe"
	when 
		SchoolTravelTime( this == SchoolTravelTime.FROM_15_TO_45_MIN)
		outputList : List()
	then
		outputList.add(RealEstateLocation.LASNAMÄE);
end

rule "RE-108: When school travel time is 15 to 45 minutes then suggest real estate location Pirita"
	when 
		SchoolTravelTime( this == SchoolTravelTime.FROM_15_TO_45_MIN)
		outputList : List()
	then
		outputList.add(RealEstateLocation.PIRITA);
end

rule "RE-109: When school travel time is more than 45 minutes then suggest real estate location Lasnamäe"
	when 
		SchoolTravelTime( this == SchoolTravelTime.MORE_THAN_45_MIN)
		outputList : List()
	then
		outputList.add(RealEstateLocation.LASNAMÄE);
end

rule "RE-110: When school travel time is more than 45 minutes then suggest real estate location Pirita"
	when 
		SchoolTravelTime( this == SchoolTravelTime.MORE_THAN_45_MIN)
		outputList : List()
	then
		outputList.add(RealEstateLocation.PIRITA);
end

#Current school rules
rule "RE-111: When current school is TTU then suggest real estate location kesklinn"
	when 
		CurrentSchool( this == CurrentSchool.TALLINN_UNIVERSITY_OF_TECHNOLOGY)
		outputList : List()
	then
		outputList.add(RealEstateLocation.KESKLINN);
end

rule "RE-112: When current school is TTU then suggest real estate location Kristiine"
	when 
		CurrentSchool( this == CurrentSchool.TALLINN_UNIVERSITY_OF_TECHNOLOGY)
		outputList : List()
	then
		outputList.add(RealEstateLocation.KRISTIINE);
end

rule "RE-113: When current school is TTU then suggest real estate location Mustamäe"
	when 
		CurrentSchool( this == CurrentSchool.TALLINN_UNIVERSITY_OF_TECHNOLOGY)
		outputList : List()
	then
		outputList.add(RealEstateLocation.MUSTAMÄE);
end

rule "RE-114: When current school is TLU then suggest real estate location kesklinn"
	when 
		CurrentSchool( this == CurrentSchool.TALLINN_UNIVERSITY)
		outputList : List()
	then
		outputList.add(RealEstateLocation.KESKLINN);
end

rule "RE-115: When current school is TLU then suggest real estate location Kristiine"
	when 
		CurrentSchool( this == CurrentSchool.TALLINN_UNIVERSITY)
		outputList : List()
	then
		outputList.add(RealEstateLocation.KRISTIINE);
end

rule "RE-116: When current school is TLU then suggest real estate location Lasnamäe"
	when 
		CurrentSchool( this == CurrentSchool.TALLINN_UNIVERSITY)
		outputList : List()
	then
		outputList.add(RealEstateLocation.LASNAMÄE);
end

rule "RE-117: When current school is TLU then suggest real estate location Pirita"
	when 
		CurrentSchool( this == CurrentSchool.TALLINN_UNIVERSITY)
		outputList : List()
	then
		outputList.add(RealEstateLocation.PIRITA);
end

#Heating time rules
rule "RE-118: When heating time less than 1 hour then suggest real estate type flat"
	when 
		TimeRequiredForHeating( this == TimeRequiredForHeating.LESS_THAN_1_HOUR)
		outputList : List()
	then
		outputList.add(RealEstateType.FLAT);
end

rule "RE-119: When heating time less than 1 hour then suggest real estate type terraced"
	when 
		TimeRequiredForHeating( this == TimeRequiredForHeating.LESS_THAN_1_HOUR)
		outputList : List()
	then
		outputList.add(RealEstateType.TERRACED);
end

rule "RE-120: When heating time more than 1 hour then suggest real estate type terraced"
	when 
		TimeRequiredForHeating( this == TimeRequiredForHeating.MORE_THAN_1_HOUR)
		outputList : List()
	then
		outputList.add(RealEstateType.TERRACED);
end

rule "RE-121: When heating time more than 1 hour then suggest real estate type house"
	when 
		TimeRequiredForHeating( this == TimeRequiredForHeating.MORE_THAN_1_HOUR)
		outputList : List()
	then
		outputList.add(RealEstateType.HOUSE);
end

rule "RE-122: When heating time is none then suggest real estate type flat"
	when 
		TimeRequiredForHeating( this == TimeRequiredForHeating.NONE)
		outputList : List()
	then
		outputList.add(RealEstateType.FLAT);
end

rule "RE-123: When heating time is less than 1 hour then suggest 1 room"
	when 
		TimeRequiredForHeating( this == TimeRequiredForHeating.LESS_THAN_1_HOUR)
		outputList : List()
	then
		outputList.add(NumberOfRooms.ONE);
end

rule "RE-124: When heating time is less than 1 hour then suggest 2 rooms"
	when 
		TimeRequiredForHeating( this == TimeRequiredForHeating.LESS_THAN_1_HOUR)
		outputList : List()
	then
		outputList.add(NumberOfRooms.TWO);
end

rule "RE-125: When heating time is less than 1 hour then suggest 3 rooms"
	when 
		TimeRequiredForHeating( this == TimeRequiredForHeating.LESS_THAN_1_HOUR)
		outputList : List()
	then
		outputList.add(NumberOfRooms.THREE);
end

rule "RE-126: When heating time is more than 1 hour then suggest 2 rooms"
	when 
		TimeRequiredForHeating( this == TimeRequiredForHeating.MORE_THAN_1_HOUR)
		outputList : List()
	then
		outputList.add(NumberOfRooms.TWO);
end

rule "RE-127: When heating time is more than 1 hour then suggest 3 rooms"
	when 
		TimeRequiredForHeating( this == TimeRequiredForHeating.MORE_THAN_1_HOUR)
		outputList : List()
	then
		outputList.add(NumberOfRooms.THREE);
end

rule "RE-128: When heating time is more than 1 hour then suggest 4 rooms"
	when 
		TimeRequiredForHeating( this == TimeRequiredForHeating.MORE_THAN_1_HOUR)
		outputList : List()
	then
		outputList.add(NumberOfRooms.FOUR);
end

rule "RE-129: When heating time is more than 1 hour then suggest 4 rooms"
	when 
		TimeRequiredForHeating( this == TimeRequiredForHeating.MORE_THAN_1_HOUR)
		outputList : List()
	then
		outputList.add(NumberOfRooms.MORE_THAN_FOUR);
end

rule "RE-130: When heating time is none hour then suggest 1 rooms"
	when 
		TimeRequiredForHeating( this == TimeRequiredForHeating.NONE)
		outputList : List()
	then
		outputList.add(NumberOfRooms.ONE);
end

rule "RE-131: When heating time is none hour then suggest 2 rooms"
	when 
		TimeRequiredForHeating( this == TimeRequiredForHeating.NONE)
		outputList : List()
	then
		outputList.add(NumberOfRooms.TWO);
end

#Marital status rules
rule "RE-132: When single then suggest plot size less than 500"
	when 
		MaritalStatus( this == MaritalStatus.SINGLE)
		outputList : List()
	then
		outputList.add(PlotSize.LESS_THAN_500);
end

rule "RE-133: When cohabiting then suggest plot size 501 to 1500"
	when 
		MaritalStatus( this == MaritalStatus.COHABITING)
		outputList : List()
	then
		outputList.add(PlotSize.FROM_500_TO_1500);
end

rule "RE-134: When cohabiting then suggest plot size greater than 1500"
	when 
		MaritalStatus( this == MaritalStatus.COHABITING)
		outputList : List()
	then
		outputList.add(PlotSize.MORE_THAN_1500);
end

rule "RE-135: When married then suggest plot size 501 to 1500"
	when 
		MaritalStatus( this == MaritalStatus.MARRIED)
		outputList : List()
	then
		outputList.add(PlotSize.FROM_500_TO_1500);
end

rule "RE-136: When married then suggest plot size greater than 1500"
	when 
		MaritalStatus( this == MaritalStatus.MARRIED)
		outputList : List()
	then
		outputList.add(PlotSize.MORE_THAN_1500);
end

rule "RE-137: When single then suggest 1 room"
	when 
		MaritalStatus( this == MaritalStatus.SINGLE)
		outputList : List()
	then
		outputList.add(NumberOfRooms.ONE);
end

rule "RE-138: When single then suggest 2 rooms"
	when 
		MaritalStatus( this == MaritalStatus.SINGLE)
		outputList : List()
	then
		outputList.add(NumberOfRooms.TWO);
end

rule "RE-139: When cohabiting then suggest 2 rooms"
	when 
		MaritalStatus( this == MaritalStatus.COHABITING)
		outputList : List()
	then
		outputList.add(NumberOfRooms.TWO);
end

rule "RE-140: When cohabiting then suggest 3 rooms"
	when 
		MaritalStatus( this == MaritalStatus.COHABITING)
		outputList : List()
	then
		outputList.add(NumberOfRooms.THREE);
end

rule "RE-141: When cohabiting then suggest 4 rooms"
	when 
		MaritalStatus( this == MaritalStatus.COHABITING)
		outputList : List()
	then
		outputList.add(NumberOfRooms.FOUR);
end

rule "RE-142: When married then suggest 3 rooms"
	when 
		MaritalStatus( this == MaritalStatus.MARRIED)
		outputList : List()
	then
		outputList.add(NumberOfRooms.THREE);
end

rule "RE-143: When married then suggest 4 rooms"
	when 
		MaritalStatus( this == MaritalStatus.MARRIED)
		outputList : List()
	then
		outputList.add(NumberOfRooms.FOUR);
end

rule "RE-144: When married then suggest more than 4 rooms"
	when 
		MaritalStatus( this == MaritalStatus.MARRIED)
		outputList : List()
	then
		outputList.add(NumberOfRooms.MORE_THAN_FOUR);
end

#Car availability rules
rule "RE-145: When 1 car in family then suggest location Kristiine"
	when 
		CarAvailability( this == CarAvailability.ONE_CAR_IN_FAMILY)
		outputList : List()
	then
		outputList.add(RealEstateLocation.KRISTIINE);
end

rule "RE-146: When 1 car in family then suggest location kesklinn"
	when 
		CarAvailability( this == CarAvailability.ONE_CAR_IN_FAMILY)
		outputList : List()
	then
		outputList.add(RealEstateLocation.KESKLINN);
end

rule "RE-147: When 1 car in family then suggest location Mustamäe"
	when 
		CarAvailability( this == CarAvailability.ONE_CAR_IN_FAMILY)
		outputList : List()
	then
		outputList.add(RealEstateLocation.MUSTAMÄE);
end

rule "RE-148: When 1 car in family then suggest location Lasnamäe"
	when 
		CarAvailability( this == CarAvailability.ONE_CAR_IN_FAMILY)
		outputList : List()
	then
		outputList.add(RealEstateLocation.LASNAMÄE);
end

rule "RE-149: When 1 car in family then suggest location Pirita"
	when 
		CarAvailability( this == CarAvailability.ONE_CAR_IN_FAMILY)
		outputList : List()
	then
		outputList.add(RealEstateLocation.PIRITA);
end

rule "RE-150: When more than 1 car in family then suggest location Lasnamäe"
	when 
		CarAvailability( this == CarAvailability.MORE_THAN_ONE_CAR_IN_FAMILY)
		outputList : List()
	then
		outputList.add(RealEstateLocation.LASNAMÄE);
end

rule "RE-151: When more than 1 car in family then suggest location Pirita"
	when 
		CarAvailability( this == CarAvailability.MORE_THAN_ONE_CAR_IN_FAMILY)
		outputList : List()
	then
		outputList.add(RealEstateLocation.PIRITA);
end

rule "RE-152: When no car in family then suggest location kesklinn"
	when 
		CarAvailability( this == CarAvailability.NO_CAR)
		outputList : List()
	then
		outputList.add(RealEstateLocation.KESKLINN);
end

rule "RE-153: When no car in family then suggest location Kristiine"
	when 
		CarAvailability( this == CarAvailability.NO_CAR)
		outputList : List()
	then
		outputList.add(RealEstateLocation.KRISTIINE);
end

rule "RE-154: When no car in family then suggest location Mustamäe"
	when 
		CarAvailability( this == CarAvailability.NO_CAR)
		outputList : List()
	then
		outputList.add(RealEstateLocation.MUSTAMÄE);
end

rule "RE-155: When one car in family then suggest type terraced"
	when 
		CarAvailability( this == CarAvailability.ONE_CAR_IN_FAMILY)
		outputList : List()
	then
		outputList.add(RealEstateType.TERRACED);
end

rule "RE-156: When one car in family then suggest type house"
	when 
		CarAvailability( this == CarAvailability.ONE_CAR_IN_FAMILY)
		outputList : List()
	then
		outputList.add(RealEstateType.HOUSE);
end

rule "RE-157: When more than one car in family then suggest type terraced"
	when 
		CarAvailability( this == CarAvailability.MORE_THAN_ONE_CAR_IN_FAMILY)
		outputList : List()
	then
		outputList.add(RealEstateType.TERRACED);
end

rule "RE-158: When more than one car in family then suggest type house"
	when 
		CarAvailability( this == CarAvailability.MORE_THAN_ONE_CAR_IN_FAMILY)
		outputList : List()
	then
		outputList.add(RealEstateType.HOUSE);
end

rule "RE-159: When no car in family then suggest type flat"
	when 
		CarAvailability( this == CarAvailability.NO_CAR)
		outputList : List()
	then
		outputList.add(RealEstateType.FLAT);
end

#Children's age rules
rule "RE-160: When no children in family then suggest 1 rooms"
	when 
		ChildrenAged( this == ChildrenAged.NONE)
		outputList : List()
	then
		outputList.add(NumberOfRooms.ONE);
end

rule "RE-161: When no children in family then suggest 2 rooms"
	when 
		ChildrenAged( this == ChildrenAged.NONE)
		outputList : List()
	then
		outputList.add(NumberOfRooms.TWO);
end

rule "RE-162: When no children in family then suggest 3 rooms"
	when 
		ChildrenAged( this == ChildrenAged.NONE)
		outputList : List()
	then
		outputList.add(NumberOfRooms.THREE);
end

rule "RE-163: When infants in family then suggest 3 rooms"
	when 
		ChildrenAged( this == ChildrenAged.INFANTS)
		outputList : List()
	then
		outputList.add(NumberOfRooms.THREE);
end

rule "RE-164: When infants in family then suggest 4 rooms"
	when 
		ChildrenAged( this == ChildrenAged.INFANTS)
		outputList : List()
	then
		outputList.add(NumberOfRooms.FOUR);
end

rule "RE-165: When teenagers in family then suggest 3 rooms"
	when 
		ChildrenAged( this == ChildrenAged.TEENAGERS)
		outputList : List()
	then
		outputList.add(NumberOfRooms.THREE);
end

rule "RE-166: When teenagers in family then suggest 4 rooms"
	when 
		ChildrenAged( this == ChildrenAged.TEENAGERS)
		outputList : List()
	then
		outputList.add(NumberOfRooms.FOUR);
end

rule "RE-167: When teenagers in family then suggest more than 4 rooms"
	when 
		ChildrenAged( this == ChildrenAged.TEENAGERS)
		outputList : List()
	then
		outputList.add(NumberOfRooms.MORE_THAN_FOUR);
end

rule "RE-168: When children are grownups then suggest 1 room"
	when 
		ChildrenAged( this == ChildrenAged.GROWN_UP_AND_LIVING_SEPARATELY)
		outputList : List()
	then
		outputList.add(NumberOfRooms.ONE);
end

rule "RE-169: When children are grownups then suggest 2 rooms"
	when 
		ChildrenAged( this == ChildrenAged.GROWN_UP_AND_LIVING_SEPARATELY)
		outputList : List()
	then
		outputList.add(NumberOfRooms.TWO);
end

rule "RE-170: When children are grownups then suggest 3 rooms"
	when 
		ChildrenAged( this == ChildrenAged.GROWN_UP_AND_LIVING_SEPARATELY)
		outputList : List()
	then
		outputList.add(NumberOfRooms.THREE);
end

rule "RE-171: When infants in family then suggest total area 51 to 100"
	when 
		ChildrenAged( this == ChildrenAged.INFANTS)
		outputList : List()
	then
		outputList.add(TotalArea.FROM_50_TO_100);
end

rule "RE-172: When infants in family then suggest total area 101 to 250"
	when 
		ChildrenAged( this == ChildrenAged.INFANTS)
		outputList : List()
	then
		outputList.add(TotalArea.FROM_100_TO_250);
end

rule "RE-173: When teenagers in family then suggest total area 51 to 100"
	when 
		ChildrenAged( this == ChildrenAged.TEENAGERS)
		outputList : List()
	then
		outputList.add(TotalArea.FROM_50_TO_100);
end

rule "RE-174: When teenagers in family then suggest total area 101 to 250"
	when 
		ChildrenAged( this == ChildrenAged.TEENAGERS)
		outputList : List()
	then
		outputList.add(TotalArea.FROM_100_TO_250);
end

rule "RE-175: When teenagers in family then suggest total area greater than 250"
	when 
		ChildrenAged( this == ChildrenAged.TEENAGERS)
		outputList : List()
	then
		outputList.add(TotalArea.MORE_THAN_250);
end

rule "RE-176: When children are grownups then suggest total area less than 50"
	when 
		ChildrenAged( this == ChildrenAged.GROWN_UP_AND_LIVING_SEPARATELY)
		outputList : List()
	then
		outputList.add(TotalArea.LESS_THAN_50);
end

rule "RE-177: When children are grownups then suggest total area 51 to 100"
	when 
		ChildrenAged( this == ChildrenAged.GROWN_UP_AND_LIVING_SEPARATELY)
		outputList : List()
	then
		outputList.add(TotalArea.FROM_50_TO_100);
end

#Purchase readiness rules
rule "RE-178: When willing to buy then suggest transaction sale"
	when 
		ReadyToBuy( this == ReadyToBuy.YES)
		outputList : List()
	then
		outputList.add(TransactionType.SALE);
end

rule "RE-179: When not planning to, but willing to buy then suggest transaction sale"
	when 
		ReadyToBuy( this == ReadyToBuy.IF_POSSIBLE)
		outputList : List()
	then
		outputList.add(TransactionType.SALE);
end

rule "RE-180: When not planning to, but willing to buy then suggest transaction rent"
	when 
		ReadyToBuy( this == ReadyToBuy.IF_POSSIBLE)
		outputList : List()
	then
		outputList.add(TransactionType.RENT);
end

rule "RE-181: When not willing to buy then suggest transaction rent"
	when 
		ReadyToBuy( this == ReadyToBuy.NO)
		outputList : List()
	then
		outputList.add(TransactionType.RENT);
end